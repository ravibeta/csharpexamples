Interview question:
Using the following function signature, write a C# function that prints out every combination of indices using Console.WriteLine() whose values add up to a specified sum, n. Values of 0 should be ignored.

public void PrintSumCombinations(List<int> numbers, int n);

•	It’s okay to use additional private functions to implement the public function
•	Be sure to print out the indices of numbers and not the values at those indices
•	Don’t worry too much about memory or CPU optimization; focus on correctness

To help clarify the problem, calling the function with the following input:

List<int> numbers = new List<int> { 1, 1, 2, 2, 4 };
PrintSumCombinations(numbers, 4);

Should result in the following console output (the ordering of the different lines isn’t important and may vary by implementation):

0 1 2 (i.e. numbers[0] + numbers[1] + numbers[2] = 1 + 1 + 2 = 4)
0 1 3
2 3
4

Quick and Dirty solution
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IndexSum
{
    class Program
    {
        static void Main(string[] args)
        {
            var numbers = new List<int>() { 1, 1, 2, 2, 4 };
            PrintSumCombinations(numbers, 4);
        }

        public static void PrintSumCombinations(List<int> numbers, int n)
        {
            // validation
            if (numbers.Count == 0) return;
            numbers.Sort();
            if (numbers.ElementAt(0) > n) return;
            
            
            

            #region initialize
            // initialize
            var indexedNumbers = new List<IndexedNumber>();           
            for (int i = 0; i < numbers.Count(); i++)
            {
                indexedNumbers.Add(new IndexedNumber() { Number = numbers.ElementAt(i), Index = i, Used = false });
            }
            var candidate = new List<IndexedNumber>();
            var sequences = new List<List<IndexedNumber>>();
            #endregion



            PermuteAndFind(ref indexedNumbers, ref candidate, ref sequences, n);



            #region output
            // Print
            string output = string.Empty;
            sequences.ToList().ForEach(x =>
            {
                string sequence = string.Empty;
                x.ForEach(t => sequence += t.Index.ToString() + " ");
                sequence += "\r\n";
                if (output.Contains(sequence) == false)
                {
                    // eliminate duplicates
                    output += sequence;
                }
            });
            Console.WriteLine(output);
            #endregion

        }

        public static void PermuteAndFind(ref List<IndexedNumber> numbers, ref List<IndexedNumber> candidate, ref List<List<IndexedNumber>> sequences, int n)
        {
            if (candidate.Select(x => x.Number).Sum() == n)
            {
                sequences.Add(new List<IndexedNumber>(candidate));
            }
            for (int i = 0; i < numbers.Count; i++)
            {
                if (numbers[i].Used) continue;
                candidate.Add(numbers[i]);
                numbers[i].Used = true;
                PermuteAndFind(ref numbers, ref candidate, ref sequences, n);
                candidate.Remove(numbers[i]);
                numbers[i].Used = false;
            }
        }

        public class IndexedNumber
        {
            public int Number { get; set; }
            public int Index { get; set; }
            public bool Used { get; set; }
        }
    }
}
